// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NavigationBar renders correctly 1`] = `
<NavigationBar
  navIndex={0}
>
  <WithStyles(ForwardRef(AppBar))
    position="static"
  >
    <ForwardRef(AppBar)
      classes={
        Object {
          "colorDefault": "MuiAppBar-colorDefault",
          "colorInherit": "MuiAppBar-colorInherit",
          "colorPrimary": "MuiAppBar-colorPrimary",
          "colorSecondary": "MuiAppBar-colorSecondary",
          "colorTransparent": "MuiAppBar-colorTransparent",
          "positionAbsolute": "MuiAppBar-positionAbsolute",
          "positionFixed": "MuiAppBar-positionFixed",
          "positionRelative": "MuiAppBar-positionRelative",
          "positionStatic": "MuiAppBar-positionStatic",
          "positionSticky": "MuiAppBar-positionSticky",
          "root": "MuiAppBar-root",
        }
      }
      position="static"
    >
      <WithStyles(ForwardRef(Paper))
        className="MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary"
        component="header"
        elevation={4}
        square={true}
      >
        <ForwardRef(Paper)
          className="MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary"
          classes={
            Object {
              "elevation0": "MuiPaper-elevation0",
              "elevation1": "MuiPaper-elevation1",
              "elevation10": "MuiPaper-elevation10",
              "elevation11": "MuiPaper-elevation11",
              "elevation12": "MuiPaper-elevation12",
              "elevation13": "MuiPaper-elevation13",
              "elevation14": "MuiPaper-elevation14",
              "elevation15": "MuiPaper-elevation15",
              "elevation16": "MuiPaper-elevation16",
              "elevation17": "MuiPaper-elevation17",
              "elevation18": "MuiPaper-elevation18",
              "elevation19": "MuiPaper-elevation19",
              "elevation2": "MuiPaper-elevation2",
              "elevation20": "MuiPaper-elevation20",
              "elevation21": "MuiPaper-elevation21",
              "elevation22": "MuiPaper-elevation22",
              "elevation23": "MuiPaper-elevation23",
              "elevation24": "MuiPaper-elevation24",
              "elevation3": "MuiPaper-elevation3",
              "elevation4": "MuiPaper-elevation4",
              "elevation5": "MuiPaper-elevation5",
              "elevation6": "MuiPaper-elevation6",
              "elevation7": "MuiPaper-elevation7",
              "elevation8": "MuiPaper-elevation8",
              "elevation9": "MuiPaper-elevation9",
              "outlined": "MuiPaper-outlined",
              "root": "MuiPaper-root",
              "rounded": "MuiPaper-rounded",
            }
          }
          component="header"
          elevation={4}
          square={true}
        >
          <header
            className="MuiPaper-root MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary MuiPaper-elevation4"
          >
            <WithStyles(ForwardRef(Tabs))
              aria-label="navigation"
              onChange={[Function]}
              role="navigation"
              value={0}
            >
              <ForwardRef(Tabs)
                aria-label="navigation"
                classes={
                  Object {
                    "centered": "MuiTabs-centered",
                    "fixed": "MuiTabs-fixed",
                    "flexContainer": "MuiTabs-flexContainer",
                    "flexContainerVertical": "MuiTabs-flexContainerVertical",
                    "indicator": "MuiTabs-indicator",
                    "root": "MuiTabs-root",
                    "scrollButtons": "MuiTabs-scrollButtons",
                    "scrollButtonsDesktop": "MuiTabs-scrollButtonsDesktop",
                    "scrollable": "MuiTabs-scrollable",
                    "scroller": "MuiTabs-scroller",
                    "vertical": "MuiTabs-vertical",
                  }
                }
                onChange={[Function]}
                role="navigation"
                value={0}
              >
                <div
                  className="MuiTabs-root"
                  role="navigation"
                >
                  <div
                    className="MuiTabs-scroller MuiTabs-fixed"
                    onScroll={[Function]}
                    style={
                      Object {
                        "marginBottom": null,
                        "overflow": "hidden",
                      }
                    }
                  >
                    <div
                      aria-label="navigation"
                      className="MuiTabs-flexContainer"
                      onKeyDown={[Function]}
                      role="tablist"
                    >
                      <WithStyles(ForwardRef(Tab))
                        fullWidth={false}
                        id="search"
                        indicator={false}
                        key=".0"
                        label="Search"
                        onChange={[Function]}
                        selected={true}
                        textColor="inherit"
                        value={0}
                      >
                        <ForwardRef(Tab)
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "fullWidth": "MuiTab-fullWidth",
                              "labelIcon": "MuiTab-labelIcon",
                              "root": "MuiTab-root",
                              "selected": "Mui-selected",
                              "textColorInherit": "MuiTab-textColorInherit",
                              "textColorPrimary": "MuiTab-textColorPrimary",
                              "textColorSecondary": "MuiTab-textColorSecondary",
                              "wrapped": "MuiTab-wrapped",
                              "wrapper": "MuiTab-wrapper",
                            }
                          }
                          fullWidth={false}
                          id="search"
                          indicator={false}
                          label="Search"
                          onChange={[Function]}
                          selected={true}
                          textColor="inherit"
                          value={0}
                        >
                          <WithStyles(ForwardRef(ButtonBase))
                            aria-selected={true}
                            className="MuiTab-root MuiTab-textColorInherit Mui-selected"
                            disabled={false}
                            focusRipple={true}
                            id="search"
                            onClick={[Function]}
                            onFocus={[Function]}
                            role="tab"
                            tabIndex={0}
                          >
                            <ForwardRef(ButtonBase)
                              aria-selected={true}
                              className="MuiTab-root MuiTab-textColorInherit Mui-selected"
                              classes={
                                Object {
                                  "disabled": "Mui-disabled",
                                  "focusVisible": "Mui-focusVisible",
                                  "root": "MuiButtonBase-root",
                                }
                              }
                              disabled={false}
                              focusRipple={true}
                              id="search"
                              onClick={[Function]}
                              onFocus={[Function]}
                              role="tab"
                              tabIndex={0}
                            >
                              <button
                                aria-selected={true}
                                className="MuiButtonBase-root MuiTab-root MuiTab-textColorInherit Mui-selected"
                                disabled={false}
                                id="search"
                                onBlur={[Function]}
                                onClick={[Function]}
                                onDragLeave={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                onMouseDown={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                role="tab"
                                tabIndex={0}
                                type="button"
                              >
                                <span
                                  className="MuiTab-wrapper"
                                >
                                  Search
                                </span>
                                <WithStyles(memo)
                                  center={false}
                                >
                                  <ForwardRef(TouchRipple)
                                    center={false}
                                    classes={
                                      Object {
                                        "child": "MuiTouchRipple-child",
                                        "childLeaving": "MuiTouchRipple-childLeaving",
                                        "childPulsate": "MuiTouchRipple-childPulsate",
                                        "ripple": "MuiTouchRipple-ripple",
                                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                                        "root": "MuiTouchRipple-root",
                                      }
                                    }
                                  >
                                    <span
                                      className="MuiTouchRipple-root"
                                    >
                                      <TransitionGroup
                                        childFactory={[Function]}
                                        component={null}
                                        exit={true}
                                      />
                                    </span>
                                  </ForwardRef(TouchRipple)>
                                </WithStyles(memo)>
                              </button>
                            </ForwardRef(ButtonBase)>
                          </WithStyles(ForwardRef(ButtonBase))>
                        </ForwardRef(Tab)>
                      </WithStyles(ForwardRef(Tab))>
                      <WithStyles(ForwardRef(Tab))
                        fullWidth={false}
                        indicator={false}
                        key=".1"
                        label="Favorites"
                        onChange={[Function]}
                        selected={false}
                        textColor="inherit"
                        value={1}
                      >
                        <ForwardRef(Tab)
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "fullWidth": "MuiTab-fullWidth",
                              "labelIcon": "MuiTab-labelIcon",
                              "root": "MuiTab-root",
                              "selected": "Mui-selected",
                              "textColorInherit": "MuiTab-textColorInherit",
                              "textColorPrimary": "MuiTab-textColorPrimary",
                              "textColorSecondary": "MuiTab-textColorSecondary",
                              "wrapped": "MuiTab-wrapped",
                              "wrapper": "MuiTab-wrapper",
                            }
                          }
                          fullWidth={false}
                          indicator={false}
                          label="Favorites"
                          onChange={[Function]}
                          selected={false}
                          textColor="inherit"
                          value={1}
                        >
                          <WithStyles(ForwardRef(ButtonBase))
                            aria-selected={false}
                            className="MuiTab-root MuiTab-textColorInherit"
                            disabled={false}
                            focusRipple={true}
                            onClick={[Function]}
                            onFocus={[Function]}
                            role="tab"
                            tabIndex={-1}
                          >
                            <ForwardRef(ButtonBase)
                              aria-selected={false}
                              className="MuiTab-root MuiTab-textColorInherit"
                              classes={
                                Object {
                                  "disabled": "Mui-disabled",
                                  "focusVisible": "Mui-focusVisible",
                                  "root": "MuiButtonBase-root",
                                }
                              }
                              disabled={false}
                              focusRipple={true}
                              onClick={[Function]}
                              onFocus={[Function]}
                              role="tab"
                              tabIndex={-1}
                            >
                              <button
                                aria-selected={false}
                                className="MuiButtonBase-root MuiTab-root MuiTab-textColorInherit"
                                disabled={false}
                                onBlur={[Function]}
                                onClick={[Function]}
                                onDragLeave={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                onMouseDown={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                role="tab"
                                tabIndex={-1}
                                type="button"
                              >
                                <span
                                  className="MuiTab-wrapper"
                                >
                                  Favorites
                                </span>
                                <WithStyles(memo)
                                  center={false}
                                >
                                  <ForwardRef(TouchRipple)
                                    center={false}
                                    classes={
                                      Object {
                                        "child": "MuiTouchRipple-child",
                                        "childLeaving": "MuiTouchRipple-childLeaving",
                                        "childPulsate": "MuiTouchRipple-childPulsate",
                                        "ripple": "MuiTouchRipple-ripple",
                                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                                        "root": "MuiTouchRipple-root",
                                      }
                                    }
                                  >
                                    <span
                                      className="MuiTouchRipple-root"
                                    >
                                      <TransitionGroup
                                        childFactory={[Function]}
                                        component={null}
                                        exit={true}
                                      />
                                    </span>
                                  </ForwardRef(TouchRipple)>
                                </WithStyles(memo)>
                              </button>
                            </ForwardRef(ButtonBase)>
                          </WithStyles(ForwardRef(ButtonBase))>
                        </ForwardRef(Tab)>
                      </WithStyles(ForwardRef(Tab))>
                    </div>
                    <WithStyles(ForwardRef(TabIndicator))
                      className="MuiTabs-indicator"
                      color="secondary"
                      orientation="horizontal"
                      style={
                        Object {
                          "left": 0,
                          "width": 0,
                        }
                      }
                    >
                      <ForwardRef(TabIndicator)
                        className="MuiTabs-indicator"
                        classes={
                          Object {
                            "colorPrimary": "PrivateTabIndicator-colorPrimary-65",
                            "colorSecondary": "PrivateTabIndicator-colorSecondary-66",
                            "root": "PrivateTabIndicator-root-64",
                            "vertical": "PrivateTabIndicator-vertical-67",
                          }
                        }
                        color="secondary"
                        orientation="horizontal"
                        style={
                          Object {
                            "left": 0,
                            "width": 0,
                          }
                        }
                      >
                        <span
                          className="PrivateTabIndicator-root-64 PrivateTabIndicator-colorSecondary-66 MuiTabs-indicator"
                          style={
                            Object {
                              "left": 0,
                              "width": 0,
                            }
                          }
                        />
                      </ForwardRef(TabIndicator)>
                    </WithStyles(ForwardRef(TabIndicator))>
                  </div>
                </div>
              </ForwardRef(Tabs)>
            </WithStyles(ForwardRef(Tabs))>
          </header>
        </ForwardRef(Paper)>
      </WithStyles(ForwardRef(Paper))>
    </ForwardRef(AppBar)>
  </WithStyles(ForwardRef(AppBar))>
</NavigationBar>
`;

exports[`NavigationBar renders correctly 2`] = `
<NavigationBar
  navIndex={1}
>
  <WithStyles(ForwardRef(AppBar))
    position="static"
  >
    <ForwardRef(AppBar)
      classes={
        Object {
          "colorDefault": "MuiAppBar-colorDefault",
          "colorInherit": "MuiAppBar-colorInherit",
          "colorPrimary": "MuiAppBar-colorPrimary",
          "colorSecondary": "MuiAppBar-colorSecondary",
          "colorTransparent": "MuiAppBar-colorTransparent",
          "positionAbsolute": "MuiAppBar-positionAbsolute",
          "positionFixed": "MuiAppBar-positionFixed",
          "positionRelative": "MuiAppBar-positionRelative",
          "positionStatic": "MuiAppBar-positionStatic",
          "positionSticky": "MuiAppBar-positionSticky",
          "root": "MuiAppBar-root",
        }
      }
      position="static"
    >
      <WithStyles(ForwardRef(Paper))
        className="MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary"
        component="header"
        elevation={4}
        square={true}
      >
        <ForwardRef(Paper)
          className="MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary"
          classes={
            Object {
              "elevation0": "MuiPaper-elevation0",
              "elevation1": "MuiPaper-elevation1",
              "elevation10": "MuiPaper-elevation10",
              "elevation11": "MuiPaper-elevation11",
              "elevation12": "MuiPaper-elevation12",
              "elevation13": "MuiPaper-elevation13",
              "elevation14": "MuiPaper-elevation14",
              "elevation15": "MuiPaper-elevation15",
              "elevation16": "MuiPaper-elevation16",
              "elevation17": "MuiPaper-elevation17",
              "elevation18": "MuiPaper-elevation18",
              "elevation19": "MuiPaper-elevation19",
              "elevation2": "MuiPaper-elevation2",
              "elevation20": "MuiPaper-elevation20",
              "elevation21": "MuiPaper-elevation21",
              "elevation22": "MuiPaper-elevation22",
              "elevation23": "MuiPaper-elevation23",
              "elevation24": "MuiPaper-elevation24",
              "elevation3": "MuiPaper-elevation3",
              "elevation4": "MuiPaper-elevation4",
              "elevation5": "MuiPaper-elevation5",
              "elevation6": "MuiPaper-elevation6",
              "elevation7": "MuiPaper-elevation7",
              "elevation8": "MuiPaper-elevation8",
              "elevation9": "MuiPaper-elevation9",
              "outlined": "MuiPaper-outlined",
              "root": "MuiPaper-root",
              "rounded": "MuiPaper-rounded",
            }
          }
          component="header"
          elevation={4}
          square={true}
        >
          <header
            className="MuiPaper-root MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary MuiPaper-elevation4"
          >
            <WithStyles(ForwardRef(Tabs))
              aria-label="navigation"
              onChange={[Function]}
              role="navigation"
              value={1}
            >
              <ForwardRef(Tabs)
                aria-label="navigation"
                classes={
                  Object {
                    "centered": "MuiTabs-centered",
                    "fixed": "MuiTabs-fixed",
                    "flexContainer": "MuiTabs-flexContainer",
                    "flexContainerVertical": "MuiTabs-flexContainerVertical",
                    "indicator": "MuiTabs-indicator",
                    "root": "MuiTabs-root",
                    "scrollButtons": "MuiTabs-scrollButtons",
                    "scrollButtonsDesktop": "MuiTabs-scrollButtonsDesktop",
                    "scrollable": "MuiTabs-scrollable",
                    "scroller": "MuiTabs-scroller",
                    "vertical": "MuiTabs-vertical",
                  }
                }
                onChange={[Function]}
                role="navigation"
                value={1}
              >
                <div
                  className="MuiTabs-root"
                  role="navigation"
                >
                  <div
                    className="MuiTabs-scroller MuiTabs-fixed"
                    onScroll={[Function]}
                    style={
                      Object {
                        "marginBottom": null,
                        "overflow": "hidden",
                      }
                    }
                  >
                    <div
                      aria-label="navigation"
                      className="MuiTabs-flexContainer"
                      onKeyDown={[Function]}
                      role="tablist"
                    >
                      <WithStyles(ForwardRef(Tab))
                        fullWidth={false}
                        id="search"
                        indicator={false}
                        key=".0"
                        label="Search"
                        onChange={[Function]}
                        selected={false}
                        textColor="inherit"
                        value={0}
                      >
                        <ForwardRef(Tab)
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "fullWidth": "MuiTab-fullWidth",
                              "labelIcon": "MuiTab-labelIcon",
                              "root": "MuiTab-root",
                              "selected": "Mui-selected",
                              "textColorInherit": "MuiTab-textColorInherit",
                              "textColorPrimary": "MuiTab-textColorPrimary",
                              "textColorSecondary": "MuiTab-textColorSecondary",
                              "wrapped": "MuiTab-wrapped",
                              "wrapper": "MuiTab-wrapper",
                            }
                          }
                          fullWidth={false}
                          id="search"
                          indicator={false}
                          label="Search"
                          onChange={[Function]}
                          selected={false}
                          textColor="inherit"
                          value={0}
                        >
                          <WithStyles(ForwardRef(ButtonBase))
                            aria-selected={false}
                            className="MuiTab-root MuiTab-textColorInherit"
                            disabled={false}
                            focusRipple={true}
                            id="search"
                            onClick={[Function]}
                            onFocus={[Function]}
                            role="tab"
                            tabIndex={-1}
                          >
                            <ForwardRef(ButtonBase)
                              aria-selected={false}
                              className="MuiTab-root MuiTab-textColorInherit"
                              classes={
                                Object {
                                  "disabled": "Mui-disabled",
                                  "focusVisible": "Mui-focusVisible",
                                  "root": "MuiButtonBase-root",
                                }
                              }
                              disabled={false}
                              focusRipple={true}
                              id="search"
                              onClick={[Function]}
                              onFocus={[Function]}
                              role="tab"
                              tabIndex={-1}
                            >
                              <button
                                aria-selected={false}
                                className="MuiButtonBase-root MuiTab-root MuiTab-textColorInherit"
                                disabled={false}
                                id="search"
                                onBlur={[Function]}
                                onClick={[Function]}
                                onDragLeave={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                onMouseDown={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                role="tab"
                                tabIndex={-1}
                                type="button"
                              >
                                <span
                                  className="MuiTab-wrapper"
                                >
                                  Search
                                </span>
                                <WithStyles(memo)
                                  center={false}
                                >
                                  <ForwardRef(TouchRipple)
                                    center={false}
                                    classes={
                                      Object {
                                        "child": "MuiTouchRipple-child",
                                        "childLeaving": "MuiTouchRipple-childLeaving",
                                        "childPulsate": "MuiTouchRipple-childPulsate",
                                        "ripple": "MuiTouchRipple-ripple",
                                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                                        "root": "MuiTouchRipple-root",
                                      }
                                    }
                                  >
                                    <span
                                      className="MuiTouchRipple-root"
                                    >
                                      <TransitionGroup
                                        childFactory={[Function]}
                                        component={null}
                                        exit={true}
                                      />
                                    </span>
                                  </ForwardRef(TouchRipple)>
                                </WithStyles(memo)>
                              </button>
                            </ForwardRef(ButtonBase)>
                          </WithStyles(ForwardRef(ButtonBase))>
                        </ForwardRef(Tab)>
                      </WithStyles(ForwardRef(Tab))>
                      <WithStyles(ForwardRef(Tab))
                        fullWidth={false}
                        indicator={false}
                        key=".1"
                        label="Favorites"
                        onChange={[Function]}
                        selected={true}
                        textColor="inherit"
                        value={1}
                      >
                        <ForwardRef(Tab)
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "fullWidth": "MuiTab-fullWidth",
                              "labelIcon": "MuiTab-labelIcon",
                              "root": "MuiTab-root",
                              "selected": "Mui-selected",
                              "textColorInherit": "MuiTab-textColorInherit",
                              "textColorPrimary": "MuiTab-textColorPrimary",
                              "textColorSecondary": "MuiTab-textColorSecondary",
                              "wrapped": "MuiTab-wrapped",
                              "wrapper": "MuiTab-wrapper",
                            }
                          }
                          fullWidth={false}
                          indicator={false}
                          label="Favorites"
                          onChange={[Function]}
                          selected={true}
                          textColor="inherit"
                          value={1}
                        >
                          <WithStyles(ForwardRef(ButtonBase))
                            aria-selected={true}
                            className="MuiTab-root MuiTab-textColorInherit Mui-selected"
                            disabled={false}
                            focusRipple={true}
                            onClick={[Function]}
                            onFocus={[Function]}
                            role="tab"
                            tabIndex={0}
                          >
                            <ForwardRef(ButtonBase)
                              aria-selected={true}
                              className="MuiTab-root MuiTab-textColorInherit Mui-selected"
                              classes={
                                Object {
                                  "disabled": "Mui-disabled",
                                  "focusVisible": "Mui-focusVisible",
                                  "root": "MuiButtonBase-root",
                                }
                              }
                              disabled={false}
                              focusRipple={true}
                              onClick={[Function]}
                              onFocus={[Function]}
                              role="tab"
                              tabIndex={0}
                            >
                              <button
                                aria-selected={true}
                                className="MuiButtonBase-root MuiTab-root MuiTab-textColorInherit Mui-selected"
                                disabled={false}
                                onBlur={[Function]}
                                onClick={[Function]}
                                onDragLeave={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                onMouseDown={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                role="tab"
                                tabIndex={0}
                                type="button"
                              >
                                <span
                                  className="MuiTab-wrapper"
                                >
                                  Favorites
                                </span>
                                <WithStyles(memo)
                                  center={false}
                                >
                                  <ForwardRef(TouchRipple)
                                    center={false}
                                    classes={
                                      Object {
                                        "child": "MuiTouchRipple-child",
                                        "childLeaving": "MuiTouchRipple-childLeaving",
                                        "childPulsate": "MuiTouchRipple-childPulsate",
                                        "ripple": "MuiTouchRipple-ripple",
                                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                                        "root": "MuiTouchRipple-root",
                                      }
                                    }
                                  >
                                    <span
                                      className="MuiTouchRipple-root"
                                    >
                                      <TransitionGroup
                                        childFactory={[Function]}
                                        component={null}
                                        exit={true}
                                      />
                                    </span>
                                  </ForwardRef(TouchRipple)>
                                </WithStyles(memo)>
                              </button>
                            </ForwardRef(ButtonBase)>
                          </WithStyles(ForwardRef(ButtonBase))>
                        </ForwardRef(Tab)>
                      </WithStyles(ForwardRef(Tab))>
                    </div>
                    <WithStyles(ForwardRef(TabIndicator))
                      className="MuiTabs-indicator"
                      color="secondary"
                      orientation="horizontal"
                      style={
                        Object {
                          "left": 0,
                          "width": 0,
                        }
                      }
                    >
                      <ForwardRef(TabIndicator)
                        className="MuiTabs-indicator"
                        classes={
                          Object {
                            "colorPrimary": "PrivateTabIndicator-colorPrimary-65",
                            "colorSecondary": "PrivateTabIndicator-colorSecondary-66",
                            "root": "PrivateTabIndicator-root-64",
                            "vertical": "PrivateTabIndicator-vertical-67",
                          }
                        }
                        color="secondary"
                        orientation="horizontal"
                        style={
                          Object {
                            "left": 0,
                            "width": 0,
                          }
                        }
                      >
                        <span
                          className="PrivateTabIndicator-root-64 PrivateTabIndicator-colorSecondary-66 MuiTabs-indicator"
                          style={
                            Object {
                              "left": 0,
                              "width": 0,
                            }
                          }
                        />
                      </ForwardRef(TabIndicator)>
                    </WithStyles(ForwardRef(TabIndicator))>
                  </div>
                </div>
              </ForwardRef(Tabs)>
            </WithStyles(ForwardRef(Tabs))>
          </header>
        </ForwardRef(Paper)>
      </WithStyles(ForwardRef(Paper))>
    </ForwardRef(AppBar)>
  </WithStyles(ForwardRef(AppBar))>
</NavigationBar>
`;
