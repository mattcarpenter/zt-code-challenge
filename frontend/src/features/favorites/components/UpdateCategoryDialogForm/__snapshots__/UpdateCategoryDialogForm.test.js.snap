// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UpdateCategoryDialogForm should render properly 1`] = `
<UpdateCategoryDialogForm
  description="bar"
  name="foo"
  onClose={[Function]}
  onSave={[Function]}
>
  <div>
    <WithStyles(ForwardRef(DialogTitle))
      id="form-dialog-title"
    >
      <ForwardRef(DialogTitle)
        classes={
          Object {
            "root": "MuiDialogTitle-root",
          }
        }
        id="form-dialog-title"
      >
        <div
          className="MuiDialogTitle-root"
          id="form-dialog-title"
        >
          <WithStyles(ForwardRef(Typography))
            component="h2"
            variant="h6"
          >
            <ForwardRef(Typography)
              classes={
                Object {
                  "alignCenter": "MuiTypography-alignCenter",
                  "alignJustify": "MuiTypography-alignJustify",
                  "alignLeft": "MuiTypography-alignLeft",
                  "alignRight": "MuiTypography-alignRight",
                  "body1": "MuiTypography-body1",
                  "body2": "MuiTypography-body2",
                  "button": "MuiTypography-button",
                  "caption": "MuiTypography-caption",
                  "colorError": "MuiTypography-colorError",
                  "colorInherit": "MuiTypography-colorInherit",
                  "colorPrimary": "MuiTypography-colorPrimary",
                  "colorSecondary": "MuiTypography-colorSecondary",
                  "colorTextPrimary": "MuiTypography-colorTextPrimary",
                  "colorTextSecondary": "MuiTypography-colorTextSecondary",
                  "displayBlock": "MuiTypography-displayBlock",
                  "displayInline": "MuiTypography-displayInline",
                  "gutterBottom": "MuiTypography-gutterBottom",
                  "h1": "MuiTypography-h1",
                  "h2": "MuiTypography-h2",
                  "h3": "MuiTypography-h3",
                  "h4": "MuiTypography-h4",
                  "h5": "MuiTypography-h5",
                  "h6": "MuiTypography-h6",
                  "noWrap": "MuiTypography-noWrap",
                  "overline": "MuiTypography-overline",
                  "paragraph": "MuiTypography-paragraph",
                  "root": "MuiTypography-root",
                  "srOnly": "MuiTypography-srOnly",
                  "subtitle1": "MuiTypography-subtitle1",
                  "subtitle2": "MuiTypography-subtitle2",
                }
              }
              component="h2"
              variant="h6"
            >
              <h2
                className="MuiTypography-root MuiTypography-h6"
              >
                Update List
              </h2>
            </ForwardRef(Typography)>
          </WithStyles(ForwardRef(Typography))>
        </div>
      </ForwardRef(DialogTitle)>
    </WithStyles(ForwardRef(DialogTitle))>
    <WithStyles(ForwardRef(DialogContent))
      dividers={true}
    >
      <ForwardRef(DialogContent)
        classes={
          Object {
            "dividers": "MuiDialogContent-dividers",
            "root": "MuiDialogContent-root",
          }
        }
        dividers={true}
      >
        <div
          className="MuiDialogContent-root MuiDialogContent-dividers"
        >
          <WithStyles(ForwardRef(TextField))
            error={false}
            fullWidth={true}
            helperText={null}
            id="list-name"
            label="List Name"
            margin="dense"
            maxLength={64}
            onChange={[Function]}
            type="text"
            value="foo"
          >
            <ForwardRef(TextField)
              classes={
                Object {
                  "root": "MuiTextField-root",
                }
              }
              error={false}
              fullWidth={true}
              helperText={null}
              id="list-name"
              label="List Name"
              margin="dense"
              maxLength={64}
              onChange={[Function]}
              type="text"
              value="foo"
            >
              <WithStyles(ForwardRef(FormControl))
                className="MuiTextField-root"
                color="primary"
                disabled={false}
                error={false}
                fullWidth={true}
                margin="dense"
                maxLength={64}
                required={false}
                variant="standard"
              >
                <ForwardRef(FormControl)
                  className="MuiTextField-root"
                  classes={
                    Object {
                      "fullWidth": "MuiFormControl-fullWidth",
                      "marginDense": "MuiFormControl-marginDense",
                      "marginNormal": "MuiFormControl-marginNormal",
                      "root": "MuiFormControl-root",
                    }
                  }
                  color="primary"
                  disabled={false}
                  error={false}
                  fullWidth={true}
                  margin="dense"
                  maxLength={64}
                  required={false}
                  variant="standard"
                >
                  <div
                    className="MuiFormControl-root MuiTextField-root MuiFormControl-marginDense MuiFormControl-fullWidth"
                    maxLength={64}
                  >
                    <WithStyles(ForwardRef(InputLabel))
                      htmlFor="list-name"
                      id="list-name-label"
                    >
                      <ForwardRef(InputLabel)
                        classes={
                          Object {
                            "animated": "MuiInputLabel-animated",
                            "asterisk": "MuiInputLabel-asterisk",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "filled": "MuiInputLabel-filled",
                            "focused": "Mui-focused",
                            "formControl": "MuiInputLabel-formControl",
                            "marginDense": "MuiInputLabel-marginDense",
                            "outlined": "MuiInputLabel-outlined",
                            "required": "Mui-required",
                            "root": "MuiInputLabel-root",
                            "shrink": "MuiInputLabel-shrink",
                          }
                        }
                        htmlFor="list-name"
                        id="list-name-label"
                      >
                        <WithStyles(ForwardRef(FormLabel))
                          className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense"
                          classes={
                            Object {
                              "asterisk": "MuiInputLabel-asterisk",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "required": "Mui-required",
                            }
                          }
                          data-shrink={true}
                          htmlFor="list-name"
                          id="list-name-label"
                        >
                          <ForwardRef(FormLabel)
                            className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense"
                            classes={
                              Object {
                                "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                "colorSecondary": "MuiFormLabel-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "filled": "MuiFormLabel-filled",
                                "focused": "Mui-focused Mui-focused",
                                "required": "Mui-required Mui-required",
                                "root": "MuiFormLabel-root",
                              }
                            }
                            data-shrink={true}
                            htmlFor="list-name"
                            id="list-name-label"
                          >
                            <label
                              className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense MuiFormLabel-filled"
                              data-shrink={true}
                              htmlFor="list-name"
                              id="list-name-label"
                            >
                              List Name
                            </label>
                          </ForwardRef(FormLabel)>
                        </WithStyles(ForwardRef(FormLabel))>
                      </ForwardRef(InputLabel)>
                    </WithStyles(ForwardRef(InputLabel))>
                    <WithStyles(ForwardRef(Input))
                      autoFocus={false}
                      fullWidth={true}
                      id="list-name"
                      multiline={false}
                      onChange={[Function]}
                      type="text"
                      value="foo"
                    >
                      <ForwardRef(Input)
                        autoFocus={false}
                        classes={
                          Object {
                            "colorSecondary": "MuiInput-colorSecondary",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "focused": "Mui-focused",
                            "formControl": "MuiInput-formControl",
                            "fullWidth": "MuiInput-fullWidth",
                            "input": "MuiInput-input",
                            "inputMarginDense": "MuiInput-inputMarginDense",
                            "inputMultiline": "MuiInput-inputMultiline",
                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                            "marginDense": "MuiInput-marginDense",
                            "multiline": "MuiInput-multiline",
                            "root": "MuiInput-root",
                            "underline": "MuiInput-underline",
                          }
                        }
                        fullWidth={true}
                        id="list-name"
                        multiline={false}
                        onChange={[Function]}
                        type="text"
                        value="foo"
                      >
                        <WithStyles(ForwardRef(InputBase))
                          autoFocus={false}
                          classes={
                            Object {
                              "colorSecondary": "MuiInput-colorSecondary",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "formControl": "MuiInput-formControl",
                              "fullWidth": "MuiInput-fullWidth",
                              "input": "MuiInput-input",
                              "inputMarginDense": "MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInput-inputMultiline",
                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                              "marginDense": "MuiInput-marginDense",
                              "multiline": "MuiInput-multiline",
                              "root": "MuiInput-root MuiInput-underline",
                              "underline": null,
                            }
                          }
                          fullWidth={true}
                          id="list-name"
                          inputComponent="input"
                          multiline={false}
                          onChange={[Function]}
                          type="text"
                          value="foo"
                        >
                          <ForwardRef(InputBase)
                            autoFocus={false}
                            classes={
                              Object {
                                "adornedEnd": "MuiInputBase-adornedEnd",
                                "adornedStart": "MuiInputBase-adornedStart",
                                "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "focused": "Mui-focused Mui-focused",
                                "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                "input": "MuiInputBase-input MuiInput-input",
                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                              }
                            }
                            fullWidth={true}
                            id="list-name"
                            inputComponent="input"
                            multiline={false}
                            onChange={[Function]}
                            type="text"
                            value="foo"
                          >
                            <div
                              className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-marginDense MuiInput-marginDense"
                              onClick={[Function]}
                            >
                              <input
                                aria-invalid={false}
                                autoFocus={false}
                                className="MuiInputBase-input MuiInput-input MuiInputBase-inputMarginDense MuiInput-inputMarginDense"
                                disabled={false}
                                id="list-name"
                                onAnimationStart={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                type="text"
                                value="foo"
                              />
                            </div>
                          </ForwardRef(InputBase)>
                        </WithStyles(ForwardRef(InputBase))>
                      </ForwardRef(Input)>
                    </WithStyles(ForwardRef(Input))>
                  </div>
                </ForwardRef(FormControl)>
              </WithStyles(ForwardRef(FormControl))>
            </ForwardRef(TextField)>
          </WithStyles(ForwardRef(TextField))>
          <WithStyles(ForwardRef(TextField))
            fullWidth={true}
            id="list-description"
            label="List Description"
            margin="dense"
            maxLength={256}
            onChange={[Function]}
            type="text"
            value="bar"
          >
            <ForwardRef(TextField)
              classes={
                Object {
                  "root": "MuiTextField-root",
                }
              }
              fullWidth={true}
              id="list-description"
              label="List Description"
              margin="dense"
              maxLength={256}
              onChange={[Function]}
              type="text"
              value="bar"
            >
              <WithStyles(ForwardRef(FormControl))
                className="MuiTextField-root"
                color="primary"
                disabled={false}
                error={false}
                fullWidth={true}
                margin="dense"
                maxLength={256}
                required={false}
                variant="standard"
              >
                <ForwardRef(FormControl)
                  className="MuiTextField-root"
                  classes={
                    Object {
                      "fullWidth": "MuiFormControl-fullWidth",
                      "marginDense": "MuiFormControl-marginDense",
                      "marginNormal": "MuiFormControl-marginNormal",
                      "root": "MuiFormControl-root",
                    }
                  }
                  color="primary"
                  disabled={false}
                  error={false}
                  fullWidth={true}
                  margin="dense"
                  maxLength={256}
                  required={false}
                  variant="standard"
                >
                  <div
                    className="MuiFormControl-root MuiTextField-root MuiFormControl-marginDense MuiFormControl-fullWidth"
                    maxLength={256}
                  >
                    <WithStyles(ForwardRef(InputLabel))
                      htmlFor="list-description"
                      id="list-description-label"
                    >
                      <ForwardRef(InputLabel)
                        classes={
                          Object {
                            "animated": "MuiInputLabel-animated",
                            "asterisk": "MuiInputLabel-asterisk",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "filled": "MuiInputLabel-filled",
                            "focused": "Mui-focused",
                            "formControl": "MuiInputLabel-formControl",
                            "marginDense": "MuiInputLabel-marginDense",
                            "outlined": "MuiInputLabel-outlined",
                            "required": "Mui-required",
                            "root": "MuiInputLabel-root",
                            "shrink": "MuiInputLabel-shrink",
                          }
                        }
                        htmlFor="list-description"
                        id="list-description-label"
                      >
                        <WithStyles(ForwardRef(FormLabel))
                          className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense"
                          classes={
                            Object {
                              "asterisk": "MuiInputLabel-asterisk",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "required": "Mui-required",
                            }
                          }
                          data-shrink={true}
                          htmlFor="list-description"
                          id="list-description-label"
                        >
                          <ForwardRef(FormLabel)
                            className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense"
                            classes={
                              Object {
                                "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                "colorSecondary": "MuiFormLabel-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "filled": "MuiFormLabel-filled",
                                "focused": "Mui-focused Mui-focused",
                                "required": "Mui-required Mui-required",
                                "root": "MuiFormLabel-root",
                              }
                            }
                            data-shrink={true}
                            htmlFor="list-description"
                            id="list-description-label"
                          >
                            <label
                              className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiInputLabel-marginDense MuiFormLabel-filled"
                              data-shrink={true}
                              htmlFor="list-description"
                              id="list-description-label"
                            >
                              List Description
                            </label>
                          </ForwardRef(FormLabel)>
                        </WithStyles(ForwardRef(FormLabel))>
                      </ForwardRef(InputLabel)>
                    </WithStyles(ForwardRef(InputLabel))>
                    <WithStyles(ForwardRef(Input))
                      autoFocus={false}
                      fullWidth={true}
                      id="list-description"
                      multiline={false}
                      onChange={[Function]}
                      type="text"
                      value="bar"
                    >
                      <ForwardRef(Input)
                        autoFocus={false}
                        classes={
                          Object {
                            "colorSecondary": "MuiInput-colorSecondary",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "focused": "Mui-focused",
                            "formControl": "MuiInput-formControl",
                            "fullWidth": "MuiInput-fullWidth",
                            "input": "MuiInput-input",
                            "inputMarginDense": "MuiInput-inputMarginDense",
                            "inputMultiline": "MuiInput-inputMultiline",
                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                            "marginDense": "MuiInput-marginDense",
                            "multiline": "MuiInput-multiline",
                            "root": "MuiInput-root",
                            "underline": "MuiInput-underline",
                          }
                        }
                        fullWidth={true}
                        id="list-description"
                        multiline={false}
                        onChange={[Function]}
                        type="text"
                        value="bar"
                      >
                        <WithStyles(ForwardRef(InputBase))
                          autoFocus={false}
                          classes={
                            Object {
                              "colorSecondary": "MuiInput-colorSecondary",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "formControl": "MuiInput-formControl",
                              "fullWidth": "MuiInput-fullWidth",
                              "input": "MuiInput-input",
                              "inputMarginDense": "MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInput-inputMultiline",
                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                              "marginDense": "MuiInput-marginDense",
                              "multiline": "MuiInput-multiline",
                              "root": "MuiInput-root MuiInput-underline",
                              "underline": null,
                            }
                          }
                          fullWidth={true}
                          id="list-description"
                          inputComponent="input"
                          multiline={false}
                          onChange={[Function]}
                          type="text"
                          value="bar"
                        >
                          <ForwardRef(InputBase)
                            autoFocus={false}
                            classes={
                              Object {
                                "adornedEnd": "MuiInputBase-adornedEnd",
                                "adornedStart": "MuiInputBase-adornedStart",
                                "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "focused": "Mui-focused Mui-focused",
                                "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                "input": "MuiInputBase-input MuiInput-input",
                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                              }
                            }
                            fullWidth={true}
                            id="list-description"
                            inputComponent="input"
                            multiline={false}
                            onChange={[Function]}
                            type="text"
                            value="bar"
                          >
                            <div
                              className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-marginDense MuiInput-marginDense"
                              onClick={[Function]}
                            >
                              <input
                                aria-invalid={false}
                                autoFocus={false}
                                className="MuiInputBase-input MuiInput-input MuiInputBase-inputMarginDense MuiInput-inputMarginDense"
                                disabled={false}
                                id="list-description"
                                onAnimationStart={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                type="text"
                                value="bar"
                              />
                            </div>
                          </ForwardRef(InputBase)>
                        </WithStyles(ForwardRef(InputBase))>
                      </ForwardRef(Input)>
                    </WithStyles(ForwardRef(Input))>
                  </div>
                </ForwardRef(FormControl)>
              </WithStyles(ForwardRef(FormControl))>
            </ForwardRef(TextField)>
          </WithStyles(ForwardRef(TextField))>
        </div>
      </ForwardRef(DialogContent)>
    </WithStyles(ForwardRef(DialogContent))>
    <WithStyles(ForwardRef(DialogActions))>
      <ForwardRef(DialogActions)
        classes={
          Object {
            "root": "MuiDialogActions-root",
            "spacing": "MuiDialogActions-spacing",
          }
        }
      >
        <div
          className="MuiDialogActions-root MuiDialogActions-spacing"
        >
          <WithStyles(ForwardRef(Button))
            color="primary"
            onClick={[Function]}
          >
            <ForwardRef(Button)
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              onClick={[Function]}
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root MuiButton-text MuiButton-textPrimary"
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root MuiButton-text MuiButton-textPrimary"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    className="MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textPrimary"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      Cancel
                    </span>
                    <WithStyles(memo)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "MuiTouchRipple-child",
                            "childLeaving": "MuiTouchRipple-childLeaving",
                            "childPulsate": "MuiTouchRipple-childPulsate",
                            "ripple": "MuiTouchRipple-ripple",
                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                            "root": "MuiTouchRipple-root",
                          }
                        }
                      >
                        <span
                          className="MuiTouchRipple-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(memo)>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
          <WithStyles(ForwardRef(Button))
            color="primary"
            onClick={[Function]}
          >
            <ForwardRef(Button)
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              onClick={[Function]}
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root MuiButton-text MuiButton-textPrimary"
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root MuiButton-text MuiButton-textPrimary"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    className="MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textPrimary"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      Save
                    </span>
                    <WithStyles(memo)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "MuiTouchRipple-child",
                            "childLeaving": "MuiTouchRipple-childLeaving",
                            "childPulsate": "MuiTouchRipple-childPulsate",
                            "ripple": "MuiTouchRipple-ripple",
                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                            "root": "MuiTouchRipple-root",
                          }
                        }
                      >
                        <span
                          className="MuiTouchRipple-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(memo)>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </div>
      </ForwardRef(DialogActions)>
    </WithStyles(ForwardRef(DialogActions))>
  </div>
</UpdateCategoryDialogForm>
`;
